name: Clean up AWS
description: Deletes previous AWS resources.

inputs:
  AWS_ACCESS_KEY_ID:
    description: "AWS Access Key ID"
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: "AWS Secret Access Key"
    required: true
  AWS_REGION:
    description: "AWS Region"
    required: true
  AWS_ACCOUNT_ID:
    description: "AWS Account ID"
    required: true

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.AWS_REGION }}

    - name: Delete images and ECR repository
      shell: bash
      run: |
        echo "Checking if ECR repository 'app' exists in account ${{ inputs.AWS_ACCOUNT_ID }}..."
        REPO_EXISTS=$(aws ecr describe-repositories --repository-names app --region ${{ inputs.AWS_REGION }} --query "repositories[0].repositoryName" --output text 2>/dev/null || echo "")

        if [[ -z "$REPO_EXISTS" ]]; then
          echo "ECR repository 'app' does not exist, skipping image and repo deletion."
        else
          echo "Deleting images in ECR repository: app"
          images=$(aws ecr list-images --repository-name app --region ${{ inputs.AWS_REGION }} --query 'imageIds[*]' --output json)
          if [[ "$images" != "[]" ]]; then
            echo "$images" > images.json
            aws ecr batch-delete-image --repository-name app --region ${{ inputs.AWS_REGION }} --image-ids file://images.json
          else
            echo "No images to delete"
          fi

          echo "Deleting ECR repository: app"
          aws ecr delete-repository --repository-name app --region ${{ inputs.AWS_REGION }} --force || echo "ECR repo 'app' not found or already deleted"
        fi

    - name: Delete EKS node groups
      shell: bash
      run: |
        CLUSTER_NAME="ci-cd-cluster"
        REGION="${{ inputs.AWS_REGION }}"
        ACCOUNT_ID="${{ inputs.AWS_ACCOUNT_ID }}"

        echo "Using AWS Account ID: $ACCOUNT_ID"
        echo "Checking if EKS cluster $CLUSTER_NAME exists..."
        CLUSTER_EXISTS=$(aws eks describe-cluster --name $CLUSTER_NAME --region $REGION --query "cluster.name" --output text 2>/dev/null || echo "")

        if [[ -z "$CLUSTER_EXISTS" ]]; then
          echo "EKS cluster '$CLUSTER_NAME' does not exist, skipping nodegroup deletion."
        else
          echo "Deleting node groups in EKS cluster: $CLUSTER_NAME"
          NODEGROUPS=$(aws eks list-nodegroups --cluster-name $CLUSTER_NAME --region $REGION --query "nodegroups" --output text)
          for ng in $NODEGROUPS; do
            echo "Deleting node group: $ng"
            aws eks delete-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name "$ng" --region $REGION || true
          done

          echo "Waiting for node groups to be deleted..."
          for ng in $NODEGROUPS; do
            aws eks wait nodegroup-deleted --cluster-name $CLUSTER_NAME --nodegroup-name "$ng" --region $REGION || true
          done
        fi

    - name: Delete EKS cluster
      shell: bash
      run: |
        CLUSTER_NAME="ci-cd-cluster"
        REGION="${{ inputs.AWS_REGION }}"
        ACCOUNT_ID="${{ inputs.AWS_ACCOUNT_ID }}"

        echo "Using AWS Account ID: $ACCOUNT_ID"
        echo "Checking if EKS cluster $CLUSTER_NAME exists..."
        CLUSTER_EXISTS=$(aws eks list-clusters --region $REGION --query "clusters" --output text | grep -w "$CLUSTER_NAME" || true)

        if [[ -z "$CLUSTER_EXISTS" ]]; then
          echo "EKS cluster '$CLUSTER_NAME' not found or already deleted. Skipping deletion."
        else
          echo "Deleting EKS cluster: $CLUSTER_NAME"
          aws eks delete-cluster --name $CLUSTER_NAME --region $REGION || echo "EKS cluster deletion command failed"

          echo "Waiting for EKS cluster to be deleted..."
          aws eks wait cluster-deleted --name $CLUSTER_NAME --region $REGION || echo "EKS cluster deletion wait failed or cluster not found"
        fi

    - name: Delete VPC and related resources
      shell: bash
      run: |
        REGION="${{ inputs.AWS_REGION }}"
        ACCOUNT_ID="${{ inputs.AWS_ACCOUNT_ID }}"
        echo "Using AWS Account ID: $ACCOUNT_ID"
        echo "Searching for VPC with tag Name=eks_vpc"
        VPC_ID=$(aws ec2 describe-vpcs \
          --filters "Name=tag:Name,Values=eks_vpc" \
          --region $REGION \
          --query "Vpcs[0].VpcId" \
          --output text 2>/dev/null)

        if [[ "$VPC_ID" == "None" || -z "$VPC_ID" ]]; then
          echo "VPC 'eks_vpc' not found or already deleted"
        else
          echo "Found VPC: $VPC_ID"

          # Delete subnets
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --region $REGION --query "Subnets[*].SubnetId" --output text)
          for subnet in $SUBNET_IDS; do
            echo "Deleting subnet: $subnet"
            aws ec2 delete-subnet --subnet-id "$subnet" --region $REGION || true
          done

          # Delete internet gateways
          IGW_IDS=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --region $REGION --query "InternetGateways[*].InternetGatewayId" --output text)
          for igw in $IGW_IDS; do
            echo "Detaching and deleting internet gateway: $igw"
            aws ec2 detach-internet-gateway --internet-gateway-id "$igw" --vpc-id "$VPC_ID" --region $REGION || true
            aws ec2 delete-internet-gateway --internet-gateway-id "$igw" --region $REGION || true
          done

          # Delete route tables (except main)
          ROUTE_TABLES=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --region $REGION --query "RouteTables[*].RouteTableId" --output text)
          for rtb in $ROUTE_TABLES; do
            IS_MAIN=$(aws ec2 describe-route-tables --route-table-ids "$rtb" --region $REGION --query "RouteTables[0].Associations[0].Main" --output text)
            if [[ "$IS_MAIN" != "True" ]]; then
              echo "Deleting route table: $rtb"
              aws ec2 delete-route-table --route-table-id "$rtb" --region $REGION || true
            fi
          done

          # Delete the VPC
          echo "Deleting VPC: $VPC_ID"
          aws ec2 delete-vpc --vpc-id "$VPC_ID" --region $REGION || true
        fi

    - name: Delete IAM roles
      shell: bash
      run: |
        ACCOUNT_ID="${{ inputs.AWS_ACCOUNT_ID }}"
        echo "Using AWS Account ID: $ACCOUNT_ID"
        for role in eks-cluster-role eks-node-role; do
          echo "Processing IAM role: $role"
          ROLE_EXISTS=$(aws iam get-role --role-name "$role" 2>/dev/null || true)
          if [[ -n "$ROLE_EXISTS" ]]; then
            echo "Deleting attached managed policies from role: $role"
            POLICY_ARNS=$(aws iam list-attached-role-policies --role-name "$role" --query "AttachedPolicies[*].PolicyArn" --output text)
            for policy in $POLICY_ARNS; do
              aws iam detach-role-policy --role-name "$role" --policy-arn "$policy" || true
            done

            echo "Deleting inline policies from role: $role"
            INLINE_POLICIES=$(aws iam list-role-policies --role-name "$role" --query "PolicyNames[*]" --output text)
            for inline_policy in $INLINE_POLICIES; do
              aws iam delete-role-policy --role-name "$role" --policy-name "$inline_policy" || true
            done

            echo "Removing from and deleting instance profiles for role: $role"
            INSTANCE_PROFILES=$(aws iam list-instance-profiles-for-role --role-name "$role" --query "InstanceProfiles[*].InstanceProfileName" --output text)
            for profile in $INSTANCE_PROFILES; do
              echo "Removing role $role from instance profile $profile"
              aws iam remove-role-from-instance-profile --instance-profile-name "$profile" --role-name "$role" || true
              aws iam delete-instance-profile --instance-profile-name "$profile" || true
            done

            echo "Deleting IAM role: $role"
            aws iam delete-role --role-name "$role" || true
          else 
            echo "IAM role '$role' not found or already deleted"
          fi
        done